# GoReleaser configuration for ChrisLoarryn CLI
# See: https://goreleaser.com

version: 2

project_name: ccin

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - id: ccin
    main: ./main.go
    binary: ccin
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - "386"
      - amd64
      - arm
      - arm64
    goarm:
      - "6"
      - "7"
    ignore:
      - goos: windows
        goarch: arm
      - goos: windows
        goarch: arm64
    ldflags:
      - -s -w 
      - -X main.version={{.Version}} 
      - -X main.commit={{.Commit}} 
      - -X main.date={{.Date}}
    flags:
      - -trimpath

archives:
  - id: ccin
    # this name template makes the OS and Arch compatible with the results of uname.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    files:
      - README.md
      - LICENSE*

checksum:
  name_template: 'checksums.txt'

snapshot:
  version_template: "{{ incpatch .Version }}-next"

changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - "^ci:"
      - "^chore:"
      - "merge conflict"
      - Merge pull request
      - Merge remote-tracking branch
      - Merge branch
  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: 'Bug fixes'
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: 'Performance improvements'
      regexp: '^.*?perf(\([[:word:]]+\))??!?:.+$'
      order: 2
    - title: 'Refactors'
      regexp: '^.*?refactor(\([[:word:]]+\))??!?:.+$'
      order: 3
    - title: 'Documentation updates'
      regexp: '^.*?docs(\([[:word:]]+\))??!?:.+$'
      order: 4
    - title: Others
      order: 999

release:
  # If you want to manually examine the release before it's live, uncomment this line:
  # draft: true
  # Whether to remove existing draft releases with the same name before creating
  # a new one. Only effective if `draft` is set to true.
  replace_existing_draft: true
  # Useful if you want to delay the creation of the tag in the remote.
  # You can create the tag locally but not push it and run GoReleaser.
  # It'll then set the `target_commitish` portion of the GitHub release to the
  # value of this field.
  # Only works on GitHub.
  target_commitish: '{{ .Commit }}'
  # Template for the release name.
  name_template: "{{.ProjectName}} v{{.Version}}"
  # You can change the name of the release.
  header: |
    ## ðŸš€ ChrisLoarryn CLI v{{.Version}}
    
    An advanced and powerful CLI for generating CRUD applications with modular architecture.
    
    ### ðŸ“¦ What's New in This Release
    
  footer: |
    
    ### ðŸ“¥ Installation
    
    #### Using curl (recommended):
    ```bash
    # macOS (Intel)
    curl -sSL https://github.com/chrisloarryn/homebrew-ccin/releases/download/v{{.Version}}/ccin_Darwin_x86_64.tar.gz | tar -xz && sudo mv ccin /usr/local/bin/
    
    # macOS (Apple Silicon)
    curl -sSL https://github.com/chrisloarryn/homebrew-ccin/releases/download/v{{.Version}}/ccin_Darwin_arm64.tar.gz | tar -xz && sudo mv ccin /usr/local/bin/
    
    # Linux (x86_64)
    curl -sSL https://github.com/chrisloarryn/homebrew-ccin/releases/download/v{{.Version}}/ccin_Linux_x86_64.tar.gz | tar -xz && sudo mv ccin /usr/local/bin/
    
    # Linux (ARM64)
    curl -sSL https://github.com/chrisloarryn/homebrew-ccin/releases/download/v{{.Version}}/ccin_Linux_arm64.tar.gz | tar -xz && sudo mv ccin /usr/local/bin/
    ```
    
    #### Manual download:
    Download the appropriate binary for your platform from the assets below.
    
    ### ðŸš€ Quick Start
    ```bash
    # Generate a NestJS project
    ccin generate nestjs my-api --domain user
    
    # Generate a Go Gin project with gRPC
    ccin generate go-gin my-gin-api --domain product --grpc
    
    # Generate a Go Fiber project
    ccin generate go-fiber my-fiber-api --domain order
    
    # Show help
    ccin --help
    ```
    
    ### ðŸ“‹ Full Documentation
    See the [README.md](https://github.com/chrisloarryn/homebrew-ccin/blob/main/README.md) for complete documentation.

# Universal macOS binaries
universal_binaries:
  - replace: true

# Homebrew casks (modern approach for GoReleaser v2)
homebrew_casks:
  - name: ccin
    repository:
      owner: chrisloarryn
      name: homebrew-ccin
      branch: main
    homepage: https://github.com/chrisloarryn/homebrew-ccin
    description: An advanced CLI for generating CRUD applications with modular architecture
    caveats: |
      After installation, you can use ccin to generate CRUD applications:
        ccin generate nestjs my-api --domain user
        ccin generate go-gin my-gin-api --domain product --grpc
        ccin generate go-fiber my-fiber-api --domain order
    
    # Post-install hook to remove quarantine (for unsigned binaries)
    hooks:
      post:
        install: |
          if system_command("/usr/bin/xattr", args: ["-h"]).exit_status == 0
            system_command "/usr/bin/xattr", args: ["-dr", "com.apple.quarantine", "#{staged_path}/ccin"]
          end

# Windows MSI installer (optional)
nfpms:
  - id: ccin
    package_name: ccin
    file_name_template: >-
      {{- trimsuffix .ConventionalFileName .ConventionalExtension -}}
      {{- if and (eq .Arm "6") (eq .ConventionalExtension ".deb") }}6{{ end -}}
      {{- if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end -}}
      {{- .ConventionalExtension -}}
    vendor: Cristobal Contreras
    homepage: https://github.com/chrisloarryn/homebrew-ccin
    maintainer: Cristobal Contreras <email@example.com>
    description: An advanced CLI for generating CRUD applications with modular architecture
    license: MIT
    formats:
      - deb
      - rpm
    recommends:
      - git

# Docker images (optional)
dockers:
  - image_templates:
      - "chrisloarryn/ccin:latest"
      - "chrisloarryn/ccin:v{{ .Version }}"
      - "chrisloarryn/ccin:v{{ .Major }}"
      - "chrisloarryn/ccin:v{{ .Major }}.{{ .Minor }}"
    dockerfile: Dockerfile
    use: buildx
    extra_files:
      - templates/
    build_flag_templates:
      - "--pull"
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.title={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--platform=linux/amd64"

# Announce to various platforms
announce:
  # Uncomment and configure if you want to announce releases
  # discord:
  #   enabled: true
  #   message_template: 'New release of ChrisLoarryn CLI: {{ .Tag }} is out! Check it out at {{ .ReleaseURL }}'
  
  # slack:
  #   enabled: true
  #   message_template: 'New release of ChrisLoarryn CLI: {{ .Tag }} is out! Check it out at {{ .ReleaseURL }}'
